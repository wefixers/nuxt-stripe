import type { AddressInfo } from 'node:net'
import type { ChildProcess } from 'node:child_process'
import { spawn } from 'node:child_process'

import type { StripeConstructorOptions } from '@stripe/stripe-js'
import { addPlugin, addTemplate, createResolver, defineNuxtModule, findPath, useLogger } from '@nuxt/kit'
import { normalize, relative } from 'pathe'
import { joinURL } from 'ufo'
import defu from 'defu'

import { name, version } from '../package.json'

/**
 * Represents a set of options accessible on runtime with `useRuntimeConfig().public.stripe`.
 */
export interface ModulePublicRuntimeConfig {
  /**
   * The Stripe publishable key, it is intended to be exposed to the users.
   * Use `NUXT_PUBLIC_STRIPE_PUBLISHABLE_KEY` in the `.env` to set this key automatically.
   *
   * Check the official doc: {@link https://stripe.com/docs/keys#obtain-api-keys}
   */
  publishableKey: string

  /**
   * The Stripe client options.
   *
   * ### Note:
   * This object is available on the client-side, do not accidentally expose sensitive information.
   */
  client?: StripeConstructorOptions
}

export interface ModuleOptions extends ModulePublicRuntimeConfig {
  /**
   * The path to the stripe webhook, it will be auto-detected and the Stripe CLI will listed for events.
   * Set to `false` to disable this behavior.
   *
   * @default "api/stripe/webhook"
   */
  webhookPath?: string | false
}

export default defineNuxtModule<Partial<ModuleOptions>>({
  meta: {
    name,
    version,
    configKey: 'stripe',
  },
  defaults: {
    publishableKey: '',
  },
  async setup(options, nuxt) {
    const logger = useLogger(name)

    logger.info(`\`${name}\` setup...`)

    nuxt.options.runtimeConfig.public.stripe = defu(
      nuxt.options.runtimeConfig.public.stripe,
      {
        publishableKey: options.publishableKey,
        client: options.client,
      },
      {
        // This empty object removes null and undefined
      },
    )

    const resolver = createResolver(import.meta.url)

    addPlugin(resolver.resolve('./runtime/plugin'))

    const serverRuntime = resolver.resolve('./runtime/server/stripe')

    addTemplate({
      filename: 'types/stripe.d.ts',
      getContents: () => `// Generated by ${name} ${version}
declare module '#stripe' {
  export const defineStripeWebhook: typeof import('${serverRuntime}').defineStripeWebhook
}
`,
    })

    nuxt.hook('nitro:config', (nitroConfig) => {
      nitroConfig.alias = nitroConfig.alias || {}

      // Inline module runtime in Nitro bundle
      nitroConfig.externals = defu(
        typeof nitroConfig.externals === 'object' ? nitroConfig.externals : {}, {
          inline: [resolver.resolve('./runtime')],
        })

      nitroConfig.alias['#stripe'] = serverRuntime
    })

    nuxt.hook('prepare:types', (options) => {
      options.references.push({
        path: resolver.resolve(nuxt.options.buildDir, 'types/upload.d.ts'),
      })
    })

    // run the stripe CLI only in development
    if (nuxt.options.dev && options.webhookPath !== false) {
      let stripeWebhookPath = await findPath(options.webhookPath || 'api/stripe/webhook', {
        cwd: nuxt.options.serverDir,
      })

      if (stripeWebhookPath) {
        stripeWebhookPath = normalize(relative(nuxt.options.serverDir, stripeWebhookPath))
        stripeWebhookPath = stripeWebhookPath.split('.')[0]
      }

      if (stripeWebhookPath) {
        let stripeProcess: ChildProcess | undefined

        nuxt.hook('listen', (e) => {
          const port = (e.address() as AddressInfo).port
          const webhookPath = joinURL(`localhost:${port}`, stripeWebhookPath!)

          // stripe listen --forward-to localhost:3000/api/stripe/webhook
          stripeProcess = spawn('stripe', [
            'listen',
            '--forward-to',
            webhookPath,
          ])

          const handleProcessSignals = (): void => {
            if (!stripeProcess?.killed) {
              stripeProcess?.kill()
              stripeProcess = undefined
            }
          }

          process.on('SIGINT', handleProcessSignals)
          process.on('SIGTERM', handleProcessSignals)

          stripeProcess.stdout!.setEncoding('utf8')
          stripeProcess.stdout!.on('data', (data: string) => {
            data = data.trim()
            if (data) {
              logger.info(`Stripe:\n${data}\n`)
            }
          })

          stripeProcess.on('exit', () => {
            stripeProcess = undefined
          })

          stripeProcess.on('spawn', () => {
            logger.info(`Listening Stripe Webhook events: ${stripeWebhookPath}`)
          })

          stripeProcess.on('error', (err: any) => {
            handleProcessSignals()
            stripeProcess = undefined

            if (err.code === 'ENOENT') {
              logger.warn('Stripe CLI is missing: https://stripe.com/docs/stripe-cli#install\nYou will not be able to test the webhook')
            }
          })
        })

        nuxt.hook('close', () => {
          stripeProcess?.kill()
        })
      }
    }

    logger.success(`\`${name}\` setup done`)
  },
})
